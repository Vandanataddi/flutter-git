import 'dart:collection';import 'package:connectivity_plus/connectivity_plus.dart';import 'package:firebase_messaging/firebase_messaging.dart';import 'package:flexi_profiler/ChatConnectyCube/select_dialog_screen.dart';import 'package:flexi_profiler/Constants/AppColors.dart';import 'package:flexi_profiler/Constants/Constants_data.dart';import 'package:flexi_profiler/Constants/StateManager.dart';import 'package:flexi_profiler/Constants/sidebar.dart';import 'package:flexi_profiler/DBClasses/ApiBaseHelper.dart';import 'package:flexi_profiler/DBClasses/DBProfessionalList.dart';import 'package:flexi_profiler/Theme/DarkThemeProvider.dart';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:flutter/services.dart';import 'package:flutter_local_notifications/flutter_local_notifications.dart';import 'package:provider/provider.dart';import 'package:syncfusion_flutter_charts/charts.dart';class HomeScreenNew extends StatefulWidget {  @override  _MyHomePageState createState() => _MyHomePageState();}class _MyHomePageState extends State<HomeScreenNew> {  @override  List<dynamic> accountTypelist = [];  List<dynamic> accountTypelistRemoved = [];  bool isBadgeUpdated = false;  double tildHeight, imageContainerHeight, textContainerHeight;  int numberOfRows;  bool isLoaded = false;  double deviceHeight;  double deviceWidth;  Map<String, dynamic> badgeCountMessageMap;  ZoomPanBehavior zoomPan;  bool isSideMenuLoaded = false;  ApiBaseHelper _helper = ApiBaseHelper();  void initState() {    SystemChrome.setPreferredOrientations([DeviceOrientation.portraitUp]);    zoomPan = ZoomPanBehavior(      enableDoubleTapZooming: true,      enablePanning: true,      enablePinching: true,      enableSelectionZooming: true,    );    super.initState();    // registerNotification();    // configLocalNotification();  }  final FirebaseMessaging firebaseMessaging = FirebaseMessaging.instance;  final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin = FlutterLocalNotificationsPlugin();  List<dynamic> accountTypelistMain = [];  DarkThemeProvider themeChange;  ThemeData themeData;  @override  Widget build(BuildContext context) {    themeChange = Provider.of<DarkThemeProvider>(context);    themeData = Theme.of(context);    deviceWidth = MediaQuery.of(context).size.width;    deviceHeight = MediaQuery.of(context).size.height;    print("Device Height width : ${deviceWidth} , ${deviceHeight}");    // if (currentUser != null && isUpdateFirebaseMessageReadCount) {    //   getFirebaseMessagesBadge();    // }    return Scaffold(        key: _scaffoldKey,        body: Stack(children: <Widget>[          getChild(),          isSideMenuLoaded              ? SideBar((int index) async {                  if (index == 1) {                    var connectivityResult = await (Connectivity().checkConnectivity());                    if (connectivityResult == ConnectivityResult.mobile ||                        connectivityResult == ConnectivityResult.wifi) {                      await Navigator.of(context).pushReplacementNamed("/ZipExtrator");                      this.setState(() {                        isBadgeUpdated = false;                      });                    } else {                      await Constants_data.openDialogNoInternetConection(context);                    }                  } else if (index == 2) {                    await Navigator.of(context).pushNamed("/InboxListingScreen");                    this.setState(() {                      isBadgeUpdated = false;                    });                  }                })              : SizedBox.shrink(),        ]));  }  // void registerNotification() {  //   firebaseMessaging.requestNotificationPermissions();  //  //   firebaseMessaging.configure(onMessage: (Map<String, dynamic> message) {  //     print('onMessage: $message');  //     Platform.isAndroid  //         ? showNotification(message['notification'])  //         : showNotification(message['aps']['alert']);  //     return;  //   }, onResume: (Map<String, dynamic> message) {  //     print('onResume: $message');  //     return;  //   }, onLaunch: (Map<String, dynamic> message) {  //     print('onLaunch: $message');  //     return;  //   });  //  //   firebaseMessaging.getToken().then((token) {  //     print('token: $token');  //     Firestore.instance  //         .collection('users')  //         .document(Constants_data.repId)  //         .updateData({'pushToken': token});  //   }).catchError((err) {  //     Fluttertoast.showToast(msg: err.message.toString());  //   });  // }  //  // void configLocalNotification() {  //   var initializationSettingsAndroid =  //       new AndroidInitializationSettings('@mipmap/ic_launcher');  //   var initializationSettingsIOS = new IOSInitializationSettings();  //   var initializationSettings = new InitializationSettings(  //       initializationSettingsAndroid, initializationSettingsIOS);  //   flutterLocalNotificationsPlugin.initialize(initializationSettings);  // }  //  // void showNotification(message) async {  //   var androidPlatformChannelSpecifics = new AndroidNotificationDetails(  //     Platform.isAndroid  //         ? 'com.dfa.flutterchatdemo'  //         : 'com.duytq.flutterchatdemo',  //     'Flutter chat demo',  //     'your channel description',  //     playSound: true,  //     enableVibration: true,  //     importance: Importance.Max,  //     priority: Priority.High,  //   );  //   var iOSPlatformChannelSpecifics = new IOSNotificationDetails();  //   var platformChannelSpecifics = new NotificationDetails(  //       androidPlatformChannelSpecifics, iOSPlatformChannelSpecifics);  //  //   print(message);  //  //   await flutterLocalNotificationsPlugin.show(0, message['title'].toString(),  //       message['body'].toString(), platformChannelSpecifics,  //       payload: json.encode(message));  // }  //  // bool isUpdateFirebaseMessageReadCount = true;  //  // getFirebaseMessagesBadge() async {  //   isUpdateFirebaseMessageReadCount = false;  //   badgeCountMessageMap = new HashMap();  //   String currentUserId = currentUser["RepId"].toString();  //   var result = await Firestore.instance.collection('users').getDocuments();  //   for (int i = 0; i < result.documents.length; i++) {  //     if (result.documents[i]["id"] != currentUserId) {  //       String groupChatId;  //       String id = currentUserId;  //       String peerId = result.documents[i]["id"];  //       if (id.hashCode <= peerId.hashCode) {  //         groupChatId = '$id-$peerId';  //       } else {  //         groupChatId = '$peerId-$id';  //       }  //  //       Firestore.instance  //           .collection('messages')  //           .document(groupChatId)  //           .collection(groupChatId)  //           .snapshots()  //           .listen((event) {  //         event.documentChanges.forEach((res) {  //           if (res.type == DocumentChangeType.added) {  //             var doc = res.document.data;  //             if (doc["idTo"] == id && doc["status"] == 0) {  //               print(doc);  //               this.setState(() {  //                 badgeCountMessageMap["${doc["timestamp"]}"] = doc;  //               });  //             }  //           }  //         });  //       });  //     }  //   }  //  //   await Firestore.instance  //       .collection("groups")  //       .getDocuments()  //       .then((querySnapshot) async {  //     for (int i = 0; i < querySnapshot.documents.length; i++) {  //       var result = querySnapshot.documents[i];  //       var querySnapshot1 = await Firestore.instance  //           .collection("groups")  //           .document(result.documentID)  //           .collection("members")  //           .document("allMembers")  //           .get();  //       List<dynamic> keys = querySnapshot1.data.keys.toList();  //       if (keys.contains(currentUserId)) {  //         Firestore.instance  //             .collection('groups')  //             .document(result.documentID)  //             .collection('messages')  //             .snapshots()  //             .listen((event) {  //           event.documents.forEach((result) {  //             List<dynamic> ids = result["status"];  //             if (!ids  //                 .contains("${currentUserId}-${Constants_data.username}")) {  //               this.setState(() {  //                 badgeCountMessageMap["${result["timestamp"]}"] = result;  //               });  //             }  //           });  //         });  //       }  //     }  //   });  // }  dynamic HeaderData;  var currentUser;  bool isShowAsList = false;  Future<List<dynamic>> _getConstantsData() async {    accountTypelistMain = [];    accountTypelist = [];    accountTypelistRemoved = [];    var data;    if (Constants_data.app_user == null) {      currentUser = await StateManager.getLoginUser();    } else {      currentUser = Constants_data.app_user;    }    print("Current User : ${currentUser}");    var connectivityResult = await (Connectivity().checkConnectivity());    if (connectivityResult == ConnectivityResult.mobile || connectivityResult == ConnectivityResult.wifi) {      // getFirebaseMessagesBadge();      try {        String routeUrl = '/GetDashboardGridData?RepId=${currentUser["RepId"]}';        data = await _helper.get(routeUrl);        await StateManager.setHomeScreenGrid(data);      } on Exception catch (err) {        print('Error in GetDashboardGridData : $err');      }    } else {      var dt = await StateManager.getHomeScreenGrid();      if (dt != null) {        data = dt;      } else {        data = Constants_data.jsonMenuUpdated;      }    }    if (data == null && data["Status"] != 1) {      data = Constants_data.jsonMenuUpdated;    }    // var connectivityResult = await (Connectivity().checkConnectivity());    // if (connectivityResult == ConnectivityResult.mobile ||    //     connectivityResult == ConnectivityResult.wifi) {    //   var dataUser = await StateManager.getLoginUser();    //   currentUser = dataUser;    //   getFirebaseMessagesBadge();    //   String routeUrl =    //       '${Constants_data.baseUrl}/GetDashboardGridData?RepId=${dataUser["RepId"]}';    //   final Response = await http.get('$routeUrl');    //   print("Response ${Response.body}");    //   try {    //     data = jsonDecode(Response.body);    //     StateManager.setHomeScreenGrid(data);    //   } on Exception catch (_) {    //     print('Error');    //     data = null;    //   }    // } else {    //   var dt = await StateManager.getHomeScreenGrid();    //   if (dt != null) {    //     data = dt;    //   } else {    //     data = Constants_data.jsonMenuUpdated;    //   }    // }    List<dynamic> list = data["dt_ReturnedTables"];    List<dynamic> list1 = data["ObjRetArgs"];    print("HomeScreen SizeMenu : ${data["dt_ReturnedTables"][1]}");    Constants_data.sizeMenuItem = data["dt_ReturnedTables"][1];    isSideMenuLoaded = true;    print("Status Success Found, ${data["Message"]}");    HeaderData = list1[0];    accountTypelistMain = list[0];    accountTypelist = list[0];    print("AccoutTypeList length : ${accountTypelist.length}");    if (accountTypelist.length <= 4) {      isShowAsList = true;    } else {      if (accountTypelist.length >= 3) {        final int count = accountTypelist.length % 3;        for (int i = 0; i < count; i++) {          accountTypelistRemoved.add(accountTypelist[accountTypelist.length - 1]);          accountTypelist.removeAt(accountTypelist.length - 1);        }        numberOfRows = (accountTypelist.length / _getTiledCount()).toInt();        if (accountTypelistRemoved.length > 0) {          numberOfRows++;        }      } else {        final int count = accountTypelist.length;        for (int i = 0; i < count; i++) {          accountTypelistRemoved.add(accountTypelist[accountTypelist.length - 1]);          accountTypelist.removeAt(accountTypelist.length - 1);        }        accountTypelistRemoved = accountTypelistRemoved.reversed.toList();        numberOfRows = 1;      }      print("AccoutTypeList length : ${accountTypelist.length}");      print("AccoutTypeListRemoved length : ${accountTypelistRemoved.length}");      print("Number Of Rows : ${numberOfRows}");    }    badgeCount();    isLoaded = true;    this.setState(() {});    return accountTypelistMain;  }  badgeCount() async {    for (int i = 0; i < accountTypelist.length; i++) {      if (accountTypelist[i]["isShowBadge"] != null &&          accountTypelist[i]["isShowBadge"].toString() == "true" &&          accountTypelist[i]["badgeCountQuery"] != null) {        print("isShowBadge $i: ${accountTypelist[i]["isShowBadge"].toString()}");        print("badgeCountQuery $i: ${accountTypelist[i]["badgeCountQuery"]}");        var resQ = await DBProfessionalList.prformQueryOperation(accountTypelist[i]["badgeCountQuery"], []);        print("Badge counter : ${resQ[0]["COUNT(*)"]}");        if (resQ != null && resQ.isNotEmpty) {          accountTypelist[i]["badgeCount"] = resQ[0]["COUNT(*)"].toString();        }      }    }    for (int i = 0; i < accountTypelistRemoved.length; i++) {      if (accountTypelistRemoved[i]["isShowBadge"] != null &&          accountTypelistRemoved[i]["isShowBadge"].toString() == "true" &&          accountTypelistRemoved[i]["badgeCountQuery"] != null) {        print("isShowBadge $i: ${accountTypelistRemoved[i]["isShowBadge"].toString()}");        print("badgeCountQuery $i: ${accountTypelistRemoved[i]["badgeCountQuery"]}");        var resQ = await DBProfessionalList.prformQueryOperation(accountTypelistRemoved[i]["badgeCountQuery"], []);        print("Badge counter : ${resQ[0]["COUNT(*)"]}");        if (resQ != null && resQ.isNotEmpty) {          accountTypelistRemoved[i]["badgeCount"] = resQ[0]["COUNT(*)"].toString();        }      }    }    isBadgeUpdated = true;    this.setState(() {});  }  double img_padding = 15;  _getTiledCount() {    final int length = accountTypelist.length + accountTypelistRemoved.length;    if (length <= 3) {      img_padding = 20;      return 1;    } else if (length <= 6) {      img_padding = 18;      return 2;    } else if (length <= 12) {      img_padding = 16;      return 3;    } else if (length <= 15) {      img_padding = 14;      return 3;    } else if (length <= 20) {      img_padding = 12;      return 4;    } else {      img_padding = 10;      return 4;    }  }  _createDynamicTable() {    if (isShowAsList) {      return Column(        children: getListItems(),      );    } else {      List<TableRow> rows = [];      if (accountTypelist.length > 0) {        for (int i = 0; i < accountTypelist.length;) {          List<Widget> tild = [];          for (int j = 0; j < 3; j++) {            tild.add(getSingleItem(accountTypelist[i]));            i++;          }          rows.add(TableRow(children: tild));        }      }      if (accountTypelistRemoved.length > 0) {        List<TableRow> rows1 = [];        List<Widget> tild = [];        for (int i = 0; i < 3; i++) {          if (i < accountTypelistRemoved.length) {            tild.add(getSingleItem(accountTypelistRemoved[i]));          } else {            tild.add(Container());          }        }        rows1.add(TableRow(children: tild));        return ListView.builder(          padding: EdgeInsets.all(10.0),          itemBuilder: (context, index) {            return index == 0                ? Table(children: rows)                : Table(                    children: rows1,                  );          },          itemCount: 2,        );      }      return ListView.builder(        padding: EdgeInsets.all(10.0),        itemBuilder: (context, index) {          return Table(children: rows);        },        itemCount: 1,      );    }  }  getListItems() {    List<Widget> listRows = [];    for (int i = 0; i < accountTypelist.length; i++) {      var accountData = accountTypelist[i];      listRows.add(Container(          height: Constants_data.getHeight(context, 74),          child: InkWell(              onTap: () async {                Map<String, dynamic> arg = new HashMap();                arg["account_type"] = accountData["account_type"];                arg["menu_title"] = accountData["menu_title"];                await Navigator.of(context)                    .pushNamed(accountData["screen"], arguments: accountData["account_type"] != '' ? arg : '');                this.setState(() {                  isBadgeUpdated = false;                });              },              child: Stack(                clipBehavior: Clip.none, children: [                  Card(                      shape: RoundedRectangleBorder(                        borderRadius: BorderRadius.circular(10.0),                      ),                      elevation: 5,                      margin: EdgeInsets.symmetric(horizontal: 15, vertical: 7),                      child: Row(children: [                        Expanded(                          flex: 30,                          child: Container(                              padding: EdgeInsets.all(Constants_data.getFontSize(context, 12)),                              child: Image.asset(                                "assets/images/" + accountData["menu_icon"],                                //color: AppColors.black_color87,                              )),                        ),                        Expanded(                            flex: 90,                            child: Text(                              accountData["menu_title"],                              maxLines: 1,                              style: TextStyle(                                  color: AppColors.black_color,                                  fontSize: Constants_data.getFontSize(context, 15),                                  fontFamily: 'Roboto',                                  fontWeight: FontWeight.bold),                            )),                        accountData["additional_data"] != ""                            ? Expanded(                                flex: 20,                                child: Center(                                    child: Text(                                  accountData["additional_data"].toString(),                                  maxLines: 1,                                  style: TextStyle(                                      color: AppColors.main_color,                                      fontSize: Constants_data.getFontSize(context, 13),                                      fontFamily: 'Roboto'),                                )),                              )                            : Expanded(                                flex: 20,                                child: Center(                                    child: Text(                                  "",                                  maxLines: 1,                                  style: TextStyle(                                      color: AppColors.black_color,                                      fontSize: Constants_data.getFontSize(context, 10),                                      fontFamily: 'Roboto'),                                )),                              ),                      ])),                  Positioned(                    right: 5,                    top: 0,                    child: Container(                      padding: EdgeInsets.all(5),                      decoration: accountData["isShowBadge"] != null &&                              accountData["isShowBadge"].toString() == "true" &&                              accountData["badgeCount"] != null &&                              int.parse(accountData["badgeCount"]) > 0                          ? BoxDecoration(                              shape: BoxShape.circle,                              color: AppColors.red_color,//                        color: Color(0xFFDDDDDD)                            )                          : null,                      child: Center(                        child: Text(                          "${accountData["badgeCount"]}",                          style: TextStyle(color: AppColors.white_color, fontSize: 12),                        ),                      ),                    ),                  )                ],              ))));    }    return listRows;  }  getSingleItem(var accountData) {    return Container(      margin: EdgeInsets.only(left: 3, right: 3, top: 3, bottom: 0),      height: deviceHeight * 0.15,      child: new Container(        child: new GestureDetector(          //padding: EdgeInsets.all(0),          onTap: () async {            Map<String, dynamic> arg = new HashMap();            arg["account_type"] = accountData["account_type"];            arg["menu_title"] = accountData["menu_title"];            await Navigator.of(context)                .pushNamed(accountData["screen"], arguments: accountData["account_type"] != '' ? arg : '');            this.setState(() {              isBadgeUpdated = false;            });          },          child: new Column(            mainAxisAlignment: MainAxisAlignment.center,            children: <Widget>[              new Container(                  decoration: BoxDecoration(                    shape: BoxShape.circle,                  ),                  height: deviceHeight * 0.07,                  child: new Stack(                    clipBehavior: Clip.none, children: <Widget>[                      new Card(                        elevation: 2,                        margin: EdgeInsets.zero,                        shape: RoundedRectangleBorder(                          borderRadius: BorderRadius.circular(10.0),                        ),                        color: AppColors.white_color,                        child: new Padding(                          padding: EdgeInsets.all(deviceHeight * 0.015),                          child: Image.asset(                            "assets/images/" + accountData["menu_icon"],                            //color: AppColors.black_color87,                          ),                        ),                      ),                      Positioned(                        right: -5,                        top: -5,                        child: Container(                          padding: EdgeInsets.all(5),                          decoration: accountData["isShowBadge"] != null &&                                  accountData["isShowBadge"].toString() == "true" &&                                  accountData["badgeCount"] != null &&                                  int.parse(accountData["badgeCount"]) > 0                              ? BoxDecoration(                                  shape: BoxShape.circle,                                  color: AppColors.red_color,//                        color: Color(0xFFDDDDDD)                                )                              : null,                          child: Center(                            child: Text(                              "${accountData["badgeCount"]}",                              style: TextStyle(color: AppColors.white_color, fontSize: 11),                            ),                          ),                        ),                      )                    ],                  )),              new Container(                  width: double.infinity,                  margin: EdgeInsets.only(top: 5),                  height: deviceHeight * 0.05,                  child: new Align(                    alignment: Alignment.center,                    child: new Column(                      crossAxisAlignment: CrossAxisAlignment.center,                      children: <Widget>[                        new Expanded(                          child: new Align(                            child: new Text(                              accountData["menu_title"],                              maxLines: 1,                              style: TextStyle(                                  //fontWeight: FontWeight.bold,                                  color: AppColors.black_color,                                  fontSize: Constants_data.getFontSize(context, 12),                                  fontFamily: 'Roboto'),                            ),                          ),                        ),                        accountData["additional_data"] != ""                            ? Expanded(                                child: new Text(                                  '(' + accountData["additional_data"] + ')',                                  maxLines: 1,                                  style: TextStyle(                                      color: AppColors.main_color,                                      fontSize: Constants_data.getFontSize(context, 10),                                      fontFamily: 'Roboto',                                      fontWeight: FontWeight.bold),                                ),                              )                            : Expanded(                                child: new Text(                                  "",                                  maxLines: 1,                                  style: TextStyle(                                      color: AppColors.black_color,                                      fontSize: Constants_data.getFontSize(context, 10),                                      fontFamily: 'Roboto'),                                ),                              ),                      ],                    ),                  ))            ],          ),        ),      ),    );  }  int selectedIndex = 0;  int _current = 0;  List<T> map<T>(List list, Function handler) {    List<T> result = [];    for (var i = 0; i < list.length; i++) {      result.add(handler(i, list[i]));    }    return result;  }  final GlobalKey<ScaffoldState> _scaffoldKey = new GlobalKey<ScaffoldState>();  getChild() {    if (!isLoaded) {      return FutureBuilder<List<dynamic>>(        future: _getConstantsData(),        builder: (context, snapshot) {          if (snapshot.connectionState == ConnectionState.done) {            return getView();          } else {            return Center(child: CircularProgressIndicator());          }        },      );    } else {      if (!isBadgeUpdated) {        badgeCount();      }      return getView();    }  }  getView() {    return new Stack(      children: <Widget>[        new Container(          height: MediaQuery.of(context).size.height,          width: MediaQuery.of(context).size.width,          decoration: BoxDecoration(            image: themeChange.darkTheme                ? DecorationImage(              image: AssetImage("assets/images/menu_bg_dark.png"),              fit: BoxFit.cover,            )                : DecorationImage(              image: AssetImage("assets/images/menu_bg.png"),              fit: BoxFit.cover,            ),          ),          child: new Column(            children: <Widget>[              new Container(                margin: EdgeInsets.only(top: 30, bottom: 0, left: 5, right: 5),                padding: EdgeInsets.all(6),//                color: AppColors.white_color.withOpacity(0.2),                child: new Row(                  children: <Widget>[                    new Expanded(                        child: new Container(                      height: 40,                      alignment: Alignment.centerLeft,                      margin: EdgeInsets.only(left: 50, right: 5),                      child: new Text(                        Constants_data.appFlavour == 0 ? 'MicroLabs' : 'Olcare',                        style: TextStyle(color: AppColors.white_color, fontSize: 18, fontWeight: FontWeight.bold),                      ),                    )),                    Container(                      margin: EdgeInsets.only(left: 5, right: 5),                      child: IconButton(                          icon: Icon(                            Icons.mic,                            color: AppColors.white_color,                          ),                          // FaIcon(                          //   FontAwesomeIcons.microphoneAlt,                          //   color: AppColors.white_color,                          // ),                          onPressed: () async {                            Navigator.pushNamed(context, "/AssistanceScreen");                          }),                    ),                    Stack(                      alignment: Alignment.center,                      children: [                        IconButton(                            icon: Icon(                              Icons.message,                              color: AppColors.white_color,                            ),                            // FaIcon(                            //   FontAwesomeIcons.solidComments,                            //   color: AppColors.white_color,                            // ),                            onPressed: () async {                              // await Navigator.of(context).push(                              //   MaterialPageRoute(                              //     settings:                              //         RouteSettings(name: "/HomeScreenChat"),                              //     builder: (context) => HomeScreen(                              //         currentUserId:                              //             currentUser["RepId"].toString()),                              //   ),                              // );                              await Navigator.of(context).push(                                MaterialPageRoute(                                  settings: RouteSettings(name: "/SelectDialogScreen"),                                  builder: (context) => SelectDialogScreen(Constants_data.cubeUser),                                ),                              );                              // await Navigator.push(                              //   context,                              //   MaterialPageRoute(                              //     settings: RouteSettings(name: "/SelectDialogScreen"),                              //     builder: (context) => SelectDialogScreen(Constants_data.cubeUser),                              //   ),                              // );                              // this.setState(() {                              //   isUpdateFirebaseMessageReadCount = true;                              // });                            }),                        badgeCountMessageMap != null && badgeCountMessageMap.length > 0                            ? Positioned(                                right: 0,                                top: 0,                                child: Container(                                  padding: EdgeInsets.all(5),                                  decoration: BoxDecoration(                                    shape: BoxShape.circle,                                    color: AppColors.red_color,//                                  ),                                  child: Center(                                    child: Text(                                      "${badgeCountMessageMap.length}",                                      style: TextStyle(color: AppColors.white_color, fontSize: 11),                                    ),                                  ),                                ),                              )                            : Container()                      ],                    )                  ],                ),              ),              new Container(                  height: Constants_data.getHeight(context, 125),                  child: Stack(                    children: <Widget>[                      Container(                        margin: EdgeInsets.symmetric(horizontal: 15),                        child: Builder(                          builder: (BuildContext context) {                            return Container(                                width: MediaQuery.of(context).size.width,                                child: new Container(                                  decoration: new BoxDecoration(                                    color: Colors.transparent,                                    borderRadius: new BorderRadius.all(Radius.circular(10.0)),                                  ),                                  child: new Row(crossAxisAlignment: CrossAxisAlignment.center, children: <Widget>[                                    Expanded(                                        child: Card(                                      elevation: 0,                                      margin: EdgeInsets.symmetric(                                          horizontal: Constants_data.getHeight(context, 5),                                          vertical: Constants_data.getHeight(context, 10)),                                      shape: RoundedRectangleBorder(                                        borderRadius: BorderRadius.circular(10.0),                                      ),                                      color: AppColors.black_color,                                      child: Padding(                                        padding: EdgeInsets.all(5),                                        child: Column(                                            crossAxisAlignment: CrossAxisAlignment.center,                                            mainAxisAlignment: MainAxisAlignment.center,                                            children: <Widget>[                                              Text(                                                HeaderData["grid1_value"],                                                maxLines: 1,                                                style: TextStyle(                                                    color: AppColors.white_color,                                                    fontSize: Constants_data.getFontSize(context, 45),                                                    fontFamily: 'Gameboard'),                                              ),                                              Container(                                                  margin: EdgeInsets.only(top: 5),                                                  child: new Text(                                                    HeaderData["grid1_label"],                                                    maxLines: 1,                                                    style: TextStyle(                                                        color: AppColors.white_color,                                                        fontSize: Constants_data.getFontSize(context, 12),                                                        fontFamily: 'Roboto'),                                                  )),                                            ]),                                      ),                                    )),                                    Expanded(                                        child: Card(                                      elevation: 0,                                      margin: EdgeInsets.symmetric(                                          horizontal: Constants_data.getHeight(context, 5),                                          vertical: Constants_data.getHeight(context, 10)),                                      shape: RoundedRectangleBorder(                                        borderRadius: BorderRadius.circular(10.0),                                      ),                                      color: AppColors.black_color,                                      child: new Padding(                                        padding: EdgeInsets.all(5),                                        child: Column(                                            crossAxisAlignment: CrossAxisAlignment.center,                                            mainAxisAlignment: MainAxisAlignment.center,                                            children: <Widget>[                                              new Text(                                                HeaderData["grid2_value"],                                                maxLines: 1,                                                style: TextStyle(                                                    color: AppColors.white_color,                                                    fontSize: Constants_data.getFontSize(context, 45),                                                    fontFamily: 'Gameboard'),                                              ),                                              new Container(                                                  margin: EdgeInsets.only(top: 5),                                                  child: new Text(                                                    HeaderData["grid2_label"],                                                    maxLines: 1,                                                    style: TextStyle(                                                        color: AppColors.white_color,                                                        fontSize: Constants_data.getFontSize(context, 12),                                                        fontFamily: 'Roboto'),                                                  )),                                            ]),                                      ),                                    )),                                  ]),                                ));                          },                        ),                      ),                      // Align(                      //     alignment: Alignment.bottomCenter,                      //     child: Row(                      //       mainAxisAlignment: MainAxisAlignment.center,                      //       children: map<Widget>([0], (index, url) {                      //         return Container(                      //           width: 8.0,                      //           height: 8.0,                      //           margin: EdgeInsets.symmetric(                      //               vertical: 0.0, horizontal: 2.0),                      //           decoration: BoxDecoration(                      //               shape: BoxShape.circle,                      //               color: _current == index                      //                   ? AppColors.white_color                      //                   : Color.fromRGBO(0, 0, 0, 0.4)),                      //         );                      //       }),                      //     )),                    ],                  )),              GestureDetector(                  onTap: () {                    Navigator.pushNamed(context, "/DashboardScreen");                  },                  child: Container(                    margin: EdgeInsets.only(left: 20, right: 20, top: 10, bottom: 10),                    decoration: BoxDecoration(                        color: AppColors.black_color,                        borderRadius: new BorderRadius.only(                            topLeft: const Radius.circular(10.0),                            topRight: const Radius.circular(10.0),                            bottomLeft: const Radius.circular(10.0),                            bottomRight: const Radius.circular(10.0))),                    height: Constants_data.getHeight(context, 80),                    child: Stack(                      children: <Widget>[                        Center(                            child: Column(                          crossAxisAlignment: CrossAxisAlignment.center,                          mainAxisAlignment: MainAxisAlignment.center,                          children: [                            Container(                                margin: EdgeInsets.all(5),                                child: Text(                                  HeaderData == null ? "" : HeaderData["dashboard_label"],                                  style:                                      TextStyle(color: AppColors.white_color, fontSize: Constants_data.getFontSize(context, 12)),                                )),                            Container(                                margin: EdgeInsets.all(5),                                child: Text(                                  HeaderData == null ? "" : HeaderData["dashboard_value"],                                  style: TextStyle(                                    color: AppColors.white_color,                                    fontSize: Constants_data.getFontSize(context, 35),                                    fontWeight: FontWeight.bold,                                  ),                                ))                          ],                        )),                        // Align(                        //   alignment: Alignment.topCenter,                        //   child: Container(                        //       margin: EdgeInsets.all(10),                        //       child: Text(                        //         HeaderData["dashboard_label"],                        //         style: TextStyle(                        //             color: AppColors.white_color, fontSize: 15),                        //       )),                        // ),                        // Align(                        //   alignment: Alignment.bottomCenter,                        //   child: Container(                        //       margin: EdgeInsets.all(8),                        //       child: Text(                        //         HeaderData["dashboard_value"],                        //         style: TextStyle(                        //           color: AppColors.white_color,                        //           fontSize: Constants_data.getFontSize(context, 30),                        //           fontWeight: FontWeight.bold,                        //         ),                        //       )),                        // ),                        // Align(                        //   alignment: Alignment.centerRight,                        //   child: Icon(                        //     Icons.keyboard_arrow_right,                        //     color: AppColors.white_color,                        //     size: 30,                        //   ),                        // )                      ],                    ),                  )),              Expanded(                child: new Container(                    margin: EdgeInsets.only(left: 10, right: 10),                    decoration: new BoxDecoration(                      color: AppColors.white_color,                      //new Color.fromRGBO(255, 0, 0, 0.0),                      borderRadius: new BorderRadius.only(                        topLeft: const Radius.circular(15.0),                        topRight: const Radius.circular(15.0),                      ),                    ),//                        color: AppColors.main_color[200],                    padding: EdgeInsets.only(left: 5, right: 5, bottom: 5, top: 15),                    child: _createDynamicTable()),                //padding: EdgeInsets.only(bottom: 7, left: 7, right: 7, top: 1),              ),              new Container(                  color: AppColors.white_color,                  child: new Column(                    crossAxisAlignment: CrossAxisAlignment.center,                    children: <Widget>[                      new Container(                        height: 1,                        color: Colors.black12,                      ),                      new Container(                        color: Colors.transparent,                        padding: EdgeInsets.all(10),                        child: Text("© 2021 All Rights Reserved. Flexiware Solutions.",                            style: TextStyle(                              color: AppColors.grey_color,                              fontSize: Constants_data.getFontSize(context, 12),                            )),                      )                    ],                  )),            ],          ),        ),      ],    );  }}